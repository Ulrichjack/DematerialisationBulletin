# üìò GUIDE COMPLET - Interface GTK+/Glade pour Scanner de Bulletins Scolaires

> **Projet:** D√©mat√©rialisation des bulletins et relev√©s de notes
> **Technologies:** C + GTK+ 3 + Glade + SQLite + Tesseract OCR

---

## üìã TABLE DES MATI√àRES

1. [Pr√©paration et Installation](#phase-0)
2. [Fen√™tre Principale](#phase-1)
3. [Dialogue de Scan](#phase-2)
4. [Dialogue de Cr√©ation Manuelle](#phase-3)
5. [Dialogue de Visualisation](#phase-4)
6. [Int√©gration Code C](#phase-5)
7. [Compilation et Tests](#phase-6)
8. [Checklist Finale](#checklist)

---

## üì¶ PHASE 0: PR√âPARATION ET INSTALLATION {#phase-0}

### 0.1 Installer les outils n√©cessaires

**Ubuntu/Debian:**
```bash
sudo apt-get update
sudo apt-get install glade libgtk-3-dev pkg-config
```

**Fedora/RedHat:**
```bash
sudo dnf install glade gtk3-devel
```

**Arch Linux:**
```bash
sudo pacman -S glade gtk3
```

### 0.2 Organiser la structure du projet

Cr√©e cette arborescence:
```
bulletin_scanner/
‚îú‚îÄ‚îÄ src/
‚îÇ   ‚îú‚îÄ‚îÄ main.c              (existant)
‚îÇ   ‚îú‚îÄ‚îÄ bulletin_utils.c    (existant)
‚îÇ   ‚îú‚îÄ‚îÄ database.c          (existant)
‚îÇ   ‚îú‚îÄ‚îÄ ocr_utils.c         (existant)
‚îÇ   ‚îî‚îÄ‚îÄ gui.c               (NOUVEAU - √† cr√©er)
‚îú‚îÄ‚îÄ include/
‚îÇ   ‚îú‚îÄ‚îÄ bulletin.h          (existant)
‚îÇ   ‚îú‚îÄ‚îÄ database.h          (existant)
‚îÇ   ‚îú‚îÄ‚îÄ ocr_utils.h         (existant)
‚îÇ   ‚îî‚îÄ‚îÄ gui.h               (NOUVEAU - √† cr√©er)
‚îú‚îÄ‚îÄ ui/
‚îÇ   ‚îî‚îÄ‚îÄ bulletin_app.glade  (NOUVEAU - fichier Glade)
‚îú‚îÄ‚îÄ build/
‚îú‚îÄ‚îÄ data/
‚îÇ   ‚îî‚îÄ‚îÄ bulletins.db
‚îú‚îÄ‚îÄ images/
‚îî‚îÄ‚îÄ Makefile                (√† modifier)
```

### 0.3 Cr√©er le fichier gui.h

Cr√©e `include/gui.h` qui contiendra:

- Structure `AppWidgets` avec tous les pointeurs vers les widgets GTK
- Prototypes des fonctions d'initialisation
- Prototypes des callbacks (fonctions appel√©es par les signaux)
- Fonctions utilitaires pour l'interface

**√âl√©ments importants √† inclure:**
- Pointeurs vers tous les widgets principaux (fen√™tres, boutons, entr√©es)
- Pointeur vers la base de donn√©es SQLite
- Structure temporaire pour stocker l'√©l√®ve en cours d'√©dition
- Variables de statut (ID √©l√®ve actuel, mode √©dition, etc.)

---

## ü™ü PHASE 1: FEN√äTRE PRINCIPALE {#phase-1}

### 1.1 Lancer Glade et cr√©er le projet

1. Lance Glade depuis le terminal: `glade`
2. Cr√©e un nouveau projet (File ‚Üí New)
3. Va dans "File" ‚Üí "Save As"
4. Nomme-le `ui/bulletin_app.glade`
5. Dans les pr√©f√©rences du projet (Edit ‚Üí Preferences):
   - Biblioth√®que cible: **GTK+ 3.0**
   - Langue du projet: Fran√ßais (optionnel)

### 1.2 Cr√©er la fen√™tre principale (GtkWindow)

**√âtapes dans Glade:**

1. Dans la palette de gauche (Toplevels), s√©lectionne **GtkWindow**
2. Clique dans la zone de travail centrale
3. Dans le panneau de propri√©t√©s √† droite:

**Onglet "G√©n√©ral":**
- **ID du widget**: `main_window`
- **Titre de la fen√™tre**: `Gestion des Bulletins Scolaires`
- **Largeur par d√©faut**: `1200`
- **Hauteur par d√©faut**: `700`
- **Position de la fen√™tre**: `Center` (GTK_WIN_POS_CENTER)
- **Redimensionnable**: Coch√©
- **Ic√¥ne par d√©faut de fen√™tre**: Coch√©

**Onglet "Signaux":**
- Clique sur "Ajouter un signal"
- **Signal**: `destroy`
- **Gestionnaire**: `gtk_main_quit`
- Ce signal ferme proprement l'application quand on clique sur X

### 1.3 Ajouter le conteneur principal (GtkBox)

**Important:** Une GtkWindow ne peut contenir qu'UN SEUL widget enfant. On utilise donc une GtkBox pour organiser plusieurs √©l√©ments verticalement.

1. S√©lectionne `main_window` dans l'arbre des widgets (panneau de gauche)
2. Dans la palette, section "Containers", clique sur **GtkBox**
3. Dans le dialogue qui appara√Æt:
   - **Nombre d'√©l√©ments**: `4` (menu, recherche, tableau, statusbar)
   - Clique OK
4. Propri√©t√©s du GtkBox:
   - **ID**: `main_vbox` (optionnel, mais bonne pratique)
   - **Orientation**: `Vertical` (GTK_ORIENTATION_VERTICAL)
   - **Espacement**: `0`
   - **Homog√®ne**: Non coch√©

**R√©sultat:** Tu as maintenant 4 zones vides empil√©es verticalement

### 1.4 Cr√©er la barre de menu (GtkMenuBar)

**Dans le premier emplacement du GtkBox (zone 1):**

1. Clique sur le premier emplacement vide marqu√© "Place holder"
2. Dans la palette, section "Control and Display", ajoute **GtkMenuBar**
3. Propri√©t√©s du MenuBar:
   - **ID**: `menubar`
   - Dans l'onglet "Packing":
     - **Expand**: `Non` (d√©coch√©)
     - **Fill**: `Oui` (coch√©)
     - **Padding**: `0`

**Cr√©er le menu "Fichier":**

1. Clique sur la MenuBar dans la zone de travail
2. Tu verras appara√Ætre un placeholder pour ajouter un item
3. Clique dessus et ajoute un **GtkMenuItem**
4. Propri√©t√©s du MenuItem:
   - **Label**: `_Fichier` 
     - Le underscore (_) cr√©e un raccourci clavier Alt+F
   - **Use underline**: Coch√©

5. Clique sur ce "Fichier" dans la menubar
6. Un menu d√©roulant vide appara√Æt
7. Ajoute un **GtkMenu** (c'est le conteneur du sous-menu)
8. Dans ce GtkMenu, tu peux maintenant ajouter des items

**Ajouter les items du menu Fichier:**

**Item 1 - Scanner:**
- Widget: **GtkMenuItem**
- **ID**: `menu_scanner`
- **Label**: `Scanner un bulletin`
- Ic√¥ne (optionnel): Tu peux ajouter une image si tu veux
- **Signal** (onglet Signaux):
  - Signal: `activate`
  - Gestionnaire: `on_menu_scanner_activate`
- **Acc√©l√©rateur** (raccourci clavier):
  - Dans Signaux, section Accelerator
  - Key: `s` (la lettre S)
  - Modifiers: Coch√© `Control` (Ctrl)
  - R√©sultat: Ctrl+S pour scanner

**Item 2 - Nouveau:**
- **GtkMenuItem**
- **ID**: `menu_nouveau`
- **Label**: `Nouveau bulletin`
- **Signal**: `activate` ‚Üí `on_menu_nouveau_activate`
- **Raccourci**: Ctrl+N

**S√©parateur:**
- Ajoute un **GtkSeparatorMenuItem** (ligne de s√©paration visuelle)

**Item 3 - Quitter:**
- **GtkMenuItem**
- **ID**: `menu_quit`
- **Label**: `Quitter`
- **Signal**: `activate` ‚Üí `on_menu_quit_activate`
- **Raccourci**: Ctrl+Q

**Cr√©er le menu "Recherche":**

1. Reviens √† la MenuBar principale
2. Clique sur le placeholder √† c√¥t√© de "Fichier"
3. Ajoute un **GtkMenuItem**: Label `_Recherche`
4. Ajoute un **GtkMenu** dedans
5. Ajoute les items suivants:

**Item 1:**
- **ID**: `menu_recherche`
- **Label**: `Rechercher un √©l√®ve`
- **Signal**: `activate` ‚Üí `on_menu_recherche_activate`
- **Raccourci**: Ctrl+F

**Item 2:**
- **ID**: `menu_voir_tous`
- **Label**: `Voir tous les √©l√®ves`
- **Signal**: `activate` ‚Üí `on_menu_voir_tous_activate`
- **Raccourci**: Ctrl+L

**Cr√©er le menu "Aide":**

1. Ajoute un dernier **GtkMenuItem** sur la MenuBar: Label `_Aide`
2. Sous-menu avec un item:
   - **ID**: `menu_about`
   - **Label**: `√Ä propos`
   - **Signal**: `activate` ‚Üí `on_menu_about_activate`

### 1.5 Cr√©er la barre de recherche

**Dans le deuxi√®me emplacement du GtkBox principal (zone 2):**

1. Clique sur le deuxi√®me placeholder
2. Ajoute un **GtkBox** (conteneur horizontal pour la recherche)
3. Propri√©t√©s de cette GtkBox:
   - **ID**: `search_box`
   - **Orientation**: `Horizontal`
   - **Espacement**: `10` pixels
   - Dans "Common" ou "Widget":
     - **Margin left**: `10`
     - **Margin right**: `10`
     - **Margin top**: `10`
     - **Margin bottom**: `10`
   - Dans Packing:
     - **Expand**: `Non`
     - **Fill**: `Oui`

4. Dans le dialogue, mets **2 √©l√©ments** (nombre d'items)

**√âl√©ment 1 - Barre de recherche:**

1. Premier placeholder de la search_box
2. Ajoute un **GtkSearchEntry** (c'est une entr√©e de texte sp√©cialis√©e pour la recherche)
3. Propri√©t√©s:
   - **ID**: `search_entry`
   - **Placeholder text**: `Rechercher par nom, pr√©nom ou matricule...`
   - **Max width chars**: `50`
   - Dans Packing:
     - **Expand**: `Oui` (prend tout l'espace disponible)
     - **Fill**: `Oui`
4. Signal:
   - `search-changed` ‚Üí `on_search_changed`
   - Ce signal se d√©clenche √† chaque modification du texte

**√âl√©ment 2 - Bouton Actualiser:**

1. Deuxi√®me placeholder
2. Ajoute un **GtkButton**
3. Propri√©t√©s:
   - **ID**: `btn_refresh`
   - **Label**: `Actualiser`
   - Tu peux ajouter une ic√¥ne: dans "Button Content", choisis une ic√¥ne stock
   - Dans Packing:
     - **Expand**: `Non`
     - **Fill**: `Non`
4. Signal:
   - `clicked` ‚Üí `on_btn_refresh_clicked`

### 1.6 Cr√©er le tableau des √©l√®ves (GtkTreeView)

**Dans le troisi√®me emplacement (zone 3 - la plus importante):**

Cette zone doit prendre tout l'espace vertical restant pour afficher le tableau.

**√âtape 1 - Ajouter le ScrolledWindow:**

1. Clique sur le troisi√®me placeholder
2. Ajoute un **GtkScrolledWindow**
   - C'est obligatoire pour avoir des barres de d√©filement si le tableau est grand
3. Propri√©t√©s:
   - **ID**: `scrolled_eleves`
   - **Horizontal policy**: `Automatic` (GTK_POLICY_AUTOMATIC)
     - Barre de d√©filement horizontale appara√Æt si n√©cessaire
   - **Vertical policy**: `Automatic`
   - **Shadow type**: `In` (pour un joli effet visuel)
   - **Margins**: toutes √† `10` pixels
   - Dans Packing:
     - **Expand**: `Oui` (TR√àS IMPORTANT - prend tout l'espace)
     - **Fill**: `Oui`

**√âtape 2 - Cr√©er le mod√®le de donn√©es (ListStore):**

Avant de cr√©er le TreeView, il faut cr√©er le mod√®le qui va contenir les donn√©es.

1. Dans le menu de Glade: "Edit" ‚Üí "Create Store"
2. Ou clique sur l'ic√¥ne avec une base de donn√©es dans la barre d'outils
3. S√©lectionne **GtkListStore** (pas TreeStore, car nos donn√©es sont plates, pas hi√©rarchiques)
4. Propri√©t√©s du ListStore:
   - **ID**: `liststore_eleves`

5. **Ajouter les colonnes** (clique sur "Add" pour chaque colonne):

   **Colonne 0 - ID:**
   - Type: `gint` (entier)
   - Pour stocker l'ID de l'√©l√®ve dans la base de donn√©es
   - Cette colonne sera invisible dans le TreeView

   **Colonne 1 - Nom:**
   - Type: `gchararray` (cha√Æne de caract√®res)

   **Colonne 2 - Pr√©nom:**
   - Type: `gchararray`

   **Colonne 3 - Matricule:**
   - Type: `gchararray`

   **Colonne 4 - Classe:**
   - Type: `gchararray`

   **Colonne 5 - Moyenne:**
   - Type: `gdouble` (nombre d√©cimal)

   **Colonne 6 - Ann√©e acad√©mique:**
   - Type: `gchararray`

   **Colonne 7 - Date bulletin:**
   - Type: `gchararray`

6. Clique OK pour cr√©er le ListStore

**√âtape 3 - Cr√©er le TreeView:**

1. Dans le ScrolledWindow, ajoute un **GtkTreeView**
2. Propri√©t√©s:
   - **ID**: `treeview_eleves`
   - **Model**: Dans la liste d√©roulante, s√©lectionne `liststore_eleves`
   - **Headers visible**: `Oui` (coch√©)
   - **Headers clickable**: `Oui` (pour trier en cliquant sur les en-t√™tes)
   - **Enable search**: `Oui` (permet Ctrl+F dans le tableau)
   - **Reorderable**: `Non` (on ne veut pas que l'utilisateur r√©organise)
3. Signal IMPORTANT:
   - `row-activated` ‚Üí `on_treeview_row_activated`
   - Se d√©clenche quand on double-clique sur une ligne
   - C'est ce qui ouvrira la fen√™tre de visualisation du bulletin

**√âtape 4 - Cr√©er les colonnes du TreeView:**

Le TreeView est cr√©√© mais vide. Il faut maintenant d√©finir les colonnes visibles.

Pour chaque colonne ci-dessous, proc√®de ainsi:
1. S√©lectionne le `treeview_eleves`
2. Clique sur "Add column" (ic√¥ne + dans la hi√©rarchie)
3. S√©lectionne **GtkTreeViewColumn**

**COLONNE 1 - Nom:**

Propri√©t√©s de la TreeViewColumn:
- **ID**: `column_nom`
- **Title**: `Nom`
- **Resizable**: `Oui` (l'utilisateur peut ajuster la largeur)
- **Sizing**: `Autosize` ou `Fixed` (selon pr√©f√©rence)
- **Sort indicator**: `Oui` (affiche une fl√®che de tri)
- **Sort column ID**: `1` (correspond √† la colonne 1 du ListStore)

Dans cette TreeViewColumn, ajoute un **GtkCellRendererText**:
- **ID**: `renderer_nom`
- Dans "Attributes":
  - Clique sur "Add attribute"
  - **Attribute**: `text`
  - **Column**: `1` (colonne du ListStore √† afficher)

**COLONNE 2 - Pr√©nom:**

- TreeViewColumn:
  - **ID**: `column_prenom`
  - **Title**: `Pr√©nom`
  - **Sort column ID**: `2`
- CellRendererText:
  - **Attribute text** ‚Üí **Column**: `2`

**COLONNE 3 - Matricule:**

- TreeViewColumn:
  - **ID**: `column_matricule`
  - **Title**: `Matricule`
  - **Sort column ID**: `3`
- CellRendererText:
  - **Attribute text** ‚Üí **Column**: `3`

**COLONNE 4 - Classe:**

- TreeViewColumn:
  - **ID**: `column_classe`
  - **Title**: `Classe`
  - **Sort column ID**: `4`
- CellRendererText:
  - **Attribute text** ‚Üí **Column**: `4`

**COLONNE 5 - Moyenne:**

Cette colonne est sp√©ciale car c'est un nombre avec couleur conditionnelle.

- TreeViewColumn:
  - **ID**: `column_moyenne`
  - **Title**: `Moyenne`
  - **Sort column ID**: `5`
- CellRendererText:
  - **ID**: `renderer_moyenne`
  - **Attribute text** ‚Üí **Column**: `5`
  - Tu configureras la couleur dans le code C plus tard
  - Format: afficher avec 2 d√©cimales (dans le code C)

**COLONNE 6 - Ann√©e:**

- TreeViewColumn:
  - **ID**: `column_annee`
  - **Title**: `Ann√©e Acad√©mique`
  - **Sort column ID**: `6`
- CellRendererText:
  - **Attribute text** ‚Üí **Column**: `6`

**COLONNE 7 - Date:**

- TreeViewColumn:
  - **ID**: `column_date`
  - **Title**: `Date Bulletin`
  - **Sort column ID**: `7`
- CellRendererText:
  - **Attribute text** ‚Üí **Column**: `7`

**Note importante:** La colonne 0 (ID) n'est PAS affich√©e, elle sert juste pour retrouver l'√©l√®ve en base de donn√©es.

### 1.7 Cr√©er la barre de statut

**Dans le quatri√®me et dernier emplacement (zone 4 - en bas):**

1. Clique sur le dernier placeholder
2. Ajoute un **GtkStatusbar**
3. Propri√©t√©s:
   - **ID**: `statusbar`
   - Dans Packing:
     - **Expand**: `Non`
     - **Fill**: `Oui`

La barre de statut affichera des messages comme:
- "5 √©l√®ves charg√©s"
- "Bulletin enregistr√© avec succ√®s"
- "Erreur lors du scan"
- etc.

### 1.8 Sauvegarder le fichier Glade

1. File ‚Üí Save (Ctrl+S)
2. V√©rifie que c'est bien dans `ui/bulletin_app.glade`

**V√©rification:** Tu devrais avoir une fen√™tre avec:
- Une barre de menu en haut
- Une barre de recherche
- Un grand tableau (vide pour l'instant)
- Une barre de statut en bas

---

## üìÑ PHASE 2: DIALOGUE DE SCAN {#phase-2}

Ce dialogue s'ouvre quand on clique sur "Scanner un bulletin" dans le menu.

### 2.1 Cr√©er le dialogue

**Dans le m√™me fichier Glade:**

1. Dans la palette, section "Toplevels", ajoute un **GtkDialog**
2. Tu verras appara√Ætre une nouvelle fen√™tre dans la zone de travail
3. Propri√©t√©s:
   - **ID**: `dialog_scan`
   - **Title**: `Scanner un Bulletin`
   - **Width request**: `900`
   - **Height request**: `700`
   - **Modal**: `Oui` (coch√©)
     - Cela bloque la fen√™tre principale tant que ce dialogue est ouvert
   - **Destroy with parent**: `Oui`
     - Si on ferme la fen√™tre principale, ce dialogue se ferme aussi
   - **Window position**: `Center on parent`

### 2.2 Configurer les boutons du dialogue

Un GtkDialog a une zone sp√©ciale en bas pour les boutons d'action.

1. S√©lectionne `dialog_scan`
2. Regarde dans la hi√©rarchie: tu verras "Action Area"
3. Par d√©faut, il y a peut-√™tre d√©j√† des boutons

**Configurer les boutons:**

Si des boutons existent d√©j√†, tu peux les modifier. Sinon, ajoute-les.

**Bouton 1 - Annuler:**
- Widget: **GtkButton**
- **ID**: `btn_scan_cancel`
- **Label**: `Annuler`
- Dans "Button" properties:
  - **Response ID**: S√©lectionne `GTK_RESPONSE_CANCEL` ou entre `-6`
- Tu peux utiliser un bouton stock: `gtk-cancel`

**Bouton 2 - Enregistrer:**
- Widget: **GtkButton**
- **ID**: `btn_scan_save`
- **Label**: `Enregistrer`
- **Response ID**: `GTK_RESPONSE_OK` ou `1`
- **Can default**: `Oui` (c'est le bouton par d√©faut, activ√© par Entr√©e)
- Tu peux utiliser un bouton stock: `gtk-save`
- **Sensitive**: Initialement √† `Non` (on l'activera apr√®s le scan)

### 2.3 Structurer le contenu du dialogue

**La zone "Content Area" du dialogue:**

C'est l√† qu'on met tout le contenu.

1. S√©lectionne la "Content Area" du dialog_scan
2. Ajoute un **GtkBox** vertical
3. Propri√©t√©s:
   - **ID**: `scan_content_box`
   - **Orientation**: `Vertical`
   - **Espacement**: `15`
   - **Margins**: toutes √† `15`
4. Nombre d'√©l√©ments: `3` (s√©lection fichier, OCR, formulaire)

### 2.4 Zone de s√©lection de fichier

**Dans le premier emplacement du scan_content_box:**

1. Ajoute un **GtkBox** horizontal
2. Nombre d'√©l√©ments: `2`

**√âl√©ment 1 - FileChooserButton:**

1. Ajoute un **GtkFileChooserButton**
2. Propri√©t√©s:
   - **ID**: `filechooser_scan`
   - **Title**: `S√©lectionner un bulletin (PDF ou Image)`
   - **Action**: `Open` (GTK_FILE_CHOOSER_ACTION_OPEN)
   - **Width chars**: `40`
   - Dans Packing:
     - **Expand**: `Oui`
3. Signal:
   - `file-set` ‚Üí `on_filechooser_file_set`
   - Se d√©clenche quand l'utilisateur s√©lectionne un fichier

**Cr√©er les filtres de fichiers:**

Pour que seuls les PDF et images soient s√©lectionnables:

1. Dans Glade, menu "Edit" ‚Üí "Add widget from catalog"
2. Cherche **GtkFileFilter**
3. Cr√©e deux filtres:

**Filtre 1 - Images:**
- **ID**: `filter_images`
- **Name**: `Images (PNG, JPG)`
- **Patterns**:
  - Clique sur "Add pattern"
  - Ajoute: `*.png`
  - Ajoute: `*.jpg`
  - Ajoute: `*.jpeg`
  - Ajoute: `*.PNG`
  - Ajoute: `*.JPG`

**Filtre 2 - PDF:**
- **ID**: `filter_pdf`
- **Name**: `Documents PDF`
- **Patterns**:
  - Ajoute: `*.pdf`
  - Ajoute: `*.PDF`

4. Reviens au `filechooser_scan`
5. Dans "File Chooser" properties:
   - Ajoute les deux filtres que tu viens de cr√©er

**√âl√©ment 2 - Bouton de scan:**

1. Ajoute un **GtkButton**
2. Propri√©t√©s:
   - **ID**: `btn_lancer_scan`
   - **Label**: `Lancer le scan`
   - Ou utilise une ic√¥ne: stock `gtk-execute`
   - Dans Packing:
     - **Expand**: `Non`
3. Signal:
   - `clicked` ‚Üí `on_btn_lancer_scan_clicked`

### 2.5 Zone de pr√©visualisation OCR

**Dans le deuxi√®me emplacement du scan_content_box:**

Cette zone montre le texte brut extrait par Tesseract. On la met dans un Expander pour gagner de la place.

1. Ajoute un **GtkExpander**
2. Propri√©t√©s:
   - **ID**: `expander_ocr`
   - **Label**: `Texte extrait par OCR (cliquer pour afficher/masquer)`
   - **Expanded**: `Non` (ferm√© par d√©faut)
   - Dans Packing:
     - **Expand**: `Non`

**Dans l'Expander:**

1. Ajoute un **GtkScrolledWindow**
2. Propri√©t√©s:
   - **Height request**: `150` pixels
   - **Policies**: Automatic pour les deux

3. Dans le ScrolledWindow, ajoute un **GtkTextView**
4. Propri√©t√©s:
   - **ID**: `textview_ocr`
   - **Editable**: `Non` (lecture seule)
   - **Cursor visible**: `Non`
   - **Wrap mode**: `Word` (retour √† la ligne automatique)
   - **Left margin**: `10`
   - **Right margin**: `10`
   - **Monospace**: `Oui` (police √† chasse fixe pour le texte brut)

### 2.6 Formulaire √©ditable (Notebook avec onglets)

**Dans le troisi√®me emplacement (le plus grand):**

1. Ajoute un **GtkNotebook** (syst√®me d'onglets)
2. Propri√©t√©s:
   - **ID**: `notebook_scan`
   - **Show tabs**: `Oui`
   - **Show border**: `Oui`
   - **Scrollable**: `Non`
   - Dans Packing:
     - **Expand**: `Oui` (prend tout l'espace restant)

3. Nombre de pages: `2` (Infos perso + Mati√®res)

---

### 2.6.1 ONGLET 1 - Informations Personnelles

**Cr√©er l'onglet:**

1. S√©lectionne la premi√®re page du Notebook
2. Dans les propri√©t√©s de la page (tab):
   - **Tab label**: `Informations Personnelles`
   - **Tab icon**: Optionnel, tu peux mettre une ic√¥ne

**Contenu de l'onglet:**

1. Dans cette page, ajoute un **GtkBox** vertical
2. Propri√©t√©s:
   - **Margins**: toutes √† `20`
   - **Espacement**: `15`

3. Dans cette Box, ajoute un **GtkGrid**
4. Propri√©t√©s du Grid:
   - **ID**: `grid_infos_perso`
   - **Row spacing**: `10`
   - **Column spacing**: `15`
   - **Column homogeneous**: `Non`

**Configuration du Grid (4 colonnes x 4 lignes):**

Le Grid organise les champs en tableau. Configuration:
- Colonnes 0 et 2: Labels (√©troites)
- Colonnes 1 et 3: Entr√©es de texte (larges, expand)

**LIGNE 1:**

**Cellule (0,0) - Label Nom:**
- Widget: **GtkLabel**
- **Label**: `Nom :`
- **Xalign**: `1.0` (align√© √† droite)
- **Use markup**: Non
- Style: Gras (tu peux mettre `<b>Nom :</b>` avec markup)

**Cellule (1,0) - Entry Nom:**
- Widget: **GtkEntry**
- **ID**: `entry_nom`
- **Placeholder text**: `Nom de famille`
- **Max length**: `100`
- Dans le Grid:
  - **Column**: `1`
  - **Row**: `0`
  - **Width**: `1` (occupe 1 cellule)
  - **Expand horizontal**: `Oui`

**Cellule (2,0) - Label Pr√©nom:**
- Widget: **GtkLabel**
- **Label**: `Pr√©nom :`
- **Xalign**: `1.0`
- Dans le Grid:
  - **Column**: `2`
  - **Row**: `0`

**Cellule (3,0) - Entry Pr√©nom:**
- Widget: **GtkEntry**
- **ID**: `entry_prenom`
- **Placeholder text**: `Pr√©nom(s)`
- Dans le Grid:
  - **Column**: `3`
  - **Row**: `0`
  - **Expand horizontal**: `Oui`

**LIGNE 2:**

**Cellule (0,1) - Label Matricule:**
- **GtkLabel**: `Matricule :`

**Cellule (1,1) - Entry Matricule:**
- **GtkEntry**
- **ID**: `entry_matricule`
- **Placeholder**: `Matricule √©tudiant`

**Cellule (2,1) - Label Date Naissance:**
- **GtkLabel**: `Date de naissance :`

**Cellule (3,1) - Entry Date Naissance:**
- **GtkEntry**
- **ID**: `entry_date_naissance`
- **Placeholder**: `JJ/MM/AAAA`
- Tu peux aussi utiliser un **GtkCalendar** (plus complexe)

**LIGNE 3:**

**Cellule (0,2) - Label Lieu:**
- **GtkLabel**: `Lieu de naissance :`

**Cellule (1,2) - Entry Lieu:**
- **GtkEntry**
- **ID**: `entry_lieu_naissance`

**Cellule (2,2) - Label Classe:**
- **GtkLabel**: `Classe/Sp√©cialit√© :`

**Cellule (3,2) - Entry Classe:**
- **GtkEntry**
- **ID**: `entry_classe`
- **Placeholder**: `Ex: Licence 1 Informatique`

**LIGNE 4:**

**Cellule (0,3) - Label Ann√©e:**
- **GtkLabel**: `Ann√©e acad√©mique :`

**Cellule (1,3) - Entry Ann√©e:**
- **GtkEntry**
- **ID**: `entry_annee_academique`
- **Placeholder**: `2024-2025`

**Cellule (2,3) - Label Niveau:**
- **GtkLabel**: `Niveau :`

**Cellule (3,3) - Entry Niveau:**
- **GtkEntry**
- **ID**: `entry_niveau`
- **Placeholder**: `Ex: Niveau 1`

---

### 2.6.2 ONGLET 2 - Mati√®res et Notes

**Cr√©er l'onglet:**

1. S√©lectionne la deuxi√®me page du Notebook
2. Propri√©t√©s de la page:
   - **Tab label**: `Mati√®res et Notes`

**Contenu de l'onglet:**

1. Dans cette page, ajoute un **GtkBox** vertical
2. Propri√©t√©s:
   - **ID**: `box_matieres`
   - **Margins**: toutes √† `10`
   - **Espacement**: `10`
3. Nombre d'√©l√©ments: `4` (barre outils, tableau, moyenne, message)

---

**ZONE 1 - Barre d'outils (en haut):**

1. Ajoute un **GtkBox** horizontal
2. Propri√©t√©s:
   - **ID**: `toolbar_matieres`
   - **Espacement**: `5`
   - Dans Packing:
     - **Expand**: `Non`

3. Dans cette Box, ajoute 3 boutons:

**Bouton 1 - Ajouter:**
- **GtkButton**
- **ID**: `btn_add_matiere`
- **Label**: `Ajouter une mati√®re`
- Ou ic√¥ne stock: `gtk-add`
- Signal: `clicked` ‚Üí `on_btn_add_matiere_clicked`

**Bouton 2 - Supprimer:**
- **GtkButton**
- **ID**: `btn_remove_matiere`
- **Label**: `Supprimer`
- Ou ic√¥ne: `gtk-remove`
- **Sensitive**: `Non` (d√©sactiv√© au d√©part)
- Signal: `clicked` ‚Üí `on_btn_remove_matiere_clicked`

**Bouton 3 - Recalculer:**
- **GtkButton**
- **ID**: `btn_recalc_moyenne`
- **Label**: `Recalculer la moyenne`
- Ou ic√¥ne: `gtk-refresh`
- Signal: `clicked` ‚Üí `on_btn_recalc_clicked`

---

**ZONE 2 - Tableau des mati√®res (zone principale):**

1. Ajoute un **GtkScrolledWindow**
2. Propri√©t√©s:
   - **ID**: `scrolled_matieres`
   - **Policies**: Automatic
   - Dans Packing:
     - **Expand**: `Oui` (prend tout l'espace)

**Cr√©er le ListStore pour les mati√®res:**

1. Menu Edit ‚Üí Create Store ‚Üí **GtkListStore**
2. **ID**: `liststore_matieres_scan`
3. **Colonnes** (8 colonnes):
   - Col 0: `gchararray` (Nom complet de la mati√®re)
   - Col 1: `gchararray` (Code mati√®re ex: CP31L1101)
   - Col 2: `gdouble` (Note)
   - Col 3: `gdouble` (Coefficient)
   - Col 4: `gchararray` (Appr√©ciation)
   - Col 5: `gint` (Semestre: 1 ou 2)
   - Col 6: `gchararray` (Type: CP ou MCP)
   - Col 7: `gboolean` (Valid√©e ou non)

**Cr√©er le TreeView:**

1. Dans le ScrolledWindow, ajoute un **GtkTreeView**
2. Propri√©t√©s:
   - **ID**: `treeview_matieres_scan`
   - **Model**: `liststore_matieres_scan`
   - **Headers visible**: `Oui`
   - **Enable grid lines**: `Horizontal` (pour voir les lignes)
   - **Enable search**: `Oui`
3. Signal:
   - `cursor-changed` ‚Üí `on_matiere_selection_changed`
   - Pour activer/d√©sactiver le bouton Supprimer

**Cr√©er les colonnes du TreeView des mati√®res:**

Pour chaque colonne, ajoute une **GtkTreeViewColumn** et son **CellRenderer** associ√©.

**COLONNE 1 - Nom Mati√®re:**
- **TreeViewColumn**:
  - **ID**: `column_nom_matiere`
  - **Title**: `Mati√®re`
  - **Resizable**: `Oui`
  - **Expand**: `Oui`
  - **Min width**: `300`
- **CellRendererText**:
  - **ID**: `renderer_nom_matiere`
  - **Editable**: `Oui` (important!)
  - **Attribute text**: Column `0`
  - Signal:
    - `edited` ‚Üí `on_matiere_nom_edited`

**COLONNE 2 - Code:**
- **TreeViewColumn**:
  - **Title**: `Code`
  - **Width**: `120`
- **CellRendererText**:
  - **ID**: `renderer_code`
  - **Editable**: `Oui`
  - **Attribute text**: Column `1`
  - Signal: `edited` ‚Üí `on_matiere_code_edited`

**COLONNE 3 - Note:**
- **TreeViewColumn**:
  - **Title**: `Note (/20)`
  - **Width**: `80`
- **CellRendererSpin** (pour les nombres avec fl√®ches):
  - **ID**: `renderer_note`
  - **Editable**: `Oui`
  - **Attribute text**: Column `2`
  - **Adjustment**: (tu dois cr√©er un GtkAdjustment)
    - Value: `10.0`
    - Lower: `0.0`
    - Upper: `20.0`
    - Step increment: `0.25`
    - Page increment: `1.0`
  - **Digits**: `2` (2 d√©cimales)
  - Signal: `edited` ‚Üí `on_matiere_note_edited`

**COLONNE 4 - Coefficient:**
- **TreeViewColumn**:
  - **Title**: `Coefficient`
  - **Width**: `80`
- **CellRendererSpin**:
  - **ID**: `renderer_coef`
  - **Editable**: `Oui`
  - **Attribute text**: Column `3`
  - **Adjustment**:
    - Lower: `0.5`
    - Upper: `15.0`
    - Step: `0.5`
  - **Digits**: `1`
  - Signal: `edited` ‚Üí `on_matiere_coef_edited`

**COLONNE 5 - Appr√©ciation:**
- **TreeViewColumn**:
  - **Title**: `Appr√©ciation`
  - **Width**: `150`
- **CellRendererText**:
  - **ID**: `renderer_appreciation`
  - **Editable**: `Oui`
  - **Attribute text**: Column `4`
  - Signal: `edited` ‚Üí `on_matiere_appreciation_edited`

**COLONNE 6 - Semestre:**
- **TreeViewColumn**:
  - **Title**: `Sem.`
  - **Width**: `50`
- **CellRendererText**:
  - **ID**: `renderer_semestre`
  - **Attribute text**: Column `5`
  - **Xalign**: `0.5` (centr√©)

**COLONNE 7 - Valid√©e:**
- **TreeViewColumn**:
  - **Title**: `Valid√©e`
  - **Width**: `70`
- **CellRendererToggle** (case √† cocher):
  - **ID**: `renderer_validee`
  - **Activatable**: `Oui`
  - **Attribute active**: Column `7`
  - Signal: `toggled` ‚Üí `on_matiere_validee_toggled`

---

**ZONE 3 - Affichage de la moyenne:**

1. Ajoute un **GtkBox** horizontal
2. Propri√©t√©s:
   - **Halign**: `Center` (centr√© horizontalement)
   - **Margins**: top et bottom √† `15`
   - Dans Packing:
     - **Expand**: `Non`

3. Dans cette Box, ajoute 2 labels:

**Label 1:**
- **GtkLabel**
- **Label**: `Moyenne G√©n√©rale :`
- **Use markup**: Oui
- **Text**: `<b>Moyenne G√©n√©rale :</b>`

**Label 2:**
- **GtkLabel**
- **ID**: `label_moyenne_scan`
- **Label**: `0.00 / 20`
- **Use markup**: Oui
- **Text**: `<span size="x-large" weight="bold">0.00 / 20</span>`
- Tu changeras la couleur dans le code C selon la moyenne

---

**ZONE 4 - Message d'aide:**

1. Ajoute un **GtkLabel**
2. Propri√©t√©s:
   - **ID**: `label_info_matieres`
   - **Label**: `üí° Double-cliquez sur une cellule pour la modifier`
   - **Use markup**: Oui
   - **Xalign**: `0.5` (centr√©)
   - Style: Italique et gris
   - Dans Packing:
     - **Expand**: `Non`

---

### 2.7 Dialogue d'ajout de mati√®re

Ce petit dialogue s'ouvre quand on clique sur "Ajouter une mati√®re".

**Cr√©er le dialogue:**

1. Dans Glade, ajoute un nouveau **GtkDialog**
2. Propri√©t√©s:
   - **ID**: `dialog_add_matiere`
   - **Title**: `Ajouter une Mati√®re`
   - **Width**: `450`
   - **Height**: `400`
   - **Modal**: `Oui`
   - **Destroy with parent**: `Oui`

**Boutons du dialogue:**

- Bouton "Annuler": Response ID = GTK_RESPONSE_CANCEL
- Bouton "Ajouter": Response ID = GTK_RESPONSE_OK

**Contenu:**

1. Dans la Content Area, ajoute un **GtkBox** vertical
2. Margins: `20`, Espacement: `15`

3. Dans cette Box, ajoute un **GtkGrid**
4. Propri√©t√©s:
   - **Row spacing**: `12`
   - **Column spacing**: `10`
   - **Column homogeneous**: `Non`

**Ligne 1 - Semestre:**
- Label (0,0): `Semestre :`
- **GtkComboBoxText** (1,0):
  - **ID**: `combo_semestre`
  - **Active**: `0` (premier √©l√©ment s√©lectionn√©)
  - Items √† ajouter:
    1. `Semestre 1`
    2. `Semestre 2`

**Ligne 2 - Type:**
- Label (0,1): `Type :`
- **GtkComboBoxText** (1,1):
  - **ID**: `combo_type_matiere`
  - Items:
    1. `CP - Cours Principal`
    2. `MCP - Module de Cours Principal`

**Ligne 3 - Code:**
- Label (0,2): `Code mati√®re :`
- **GtkEntry** (1,2):
  - **ID**: `entry_code_matiere`
  - **Placeholder**: `Ex: CP31L1101`
  - **Max length**: `20`

**Ligne 4 - Nom:**
- Label (0,3): `Nom de la mati√®re :`
- **GtkEntry** (1,3):
  - **ID**: `entry_nom_matiere_add`
  - **Placeholder**: `Ex: Alg√®bre 1A`

**Ligne 5 - Note:**
- Label (0,4): `Note (/20) :`
- **GtkSpinButton** (1,4):
  - **ID**: `spin_note`
  - **Adjustment**:
    - Value: `10.0`
    - Lower: `0.0`
    - Upper: `20.0`
    - Step: `0.25`
  - **Digits**: `2`
  - **Numeric**: `Oui`

**Ligne 6 - Coefficient:**
- Label (0,5): `Coefficient :`
- **GtkSpinButton** (1,5):
  - **ID**: `spin_coefficient`
  - **Adjustment**:
    - Value: `1.0`
    - Lower: `0.5`
    - Upper: `15.0`
    - Step: `0.5`
  - **Digits**: `1`

**Ligne 7 - Module parent (optionnel):**
- Label (0,6): `Module parent :`
- **GtkEntry** (1,6):
  - **ID**: `entry_module_parent`
  - **Placeholder**: `Ex: MCP31L1101 (optionnel)`

**Ligne 8 - Valid√©e:**
- Label vide (0,7):
- **GtkCheckButton** (1,7):
  - **ID**: `check_matiere_validee`
  - **Label**: `Mati√®re valid√©e`

---

### 2.8 Sauvegarder

File ‚Üí Save (Ctrl+S)

**V√©rification:** Tu devrais maintenant avoir:
- La fen√™tre principale
- Le dialogue de scan avec 2 onglets
- Le dialogue d'ajout de mati√®re

---

## ‚úçÔ∏è PHASE 3: DIALOGUE DE CR√âATION MANUELLE {#phase-3}

Ce dialogue est presque identique au dialogue de scan, mais SANS la partie OCR.

### 3.1 Option 1 - Dupliquer le dialogue scan

**M√©thode rapide dans Glade:**

1. S√©lectionne `dialog_scan` dans la hi√©rarchie
2. Clic droit ‚Üí "Copy" (ou Ctrl+C)
3. Clic droit sur une zone vide ‚Üí "Paste" (ou Ctrl+V)
4. Un nouveau dialogue identique est cr√©√©
5. Renomme-le:
   - **ID**: `dialog_create`
   - **Title**: `Cr√©er un Nouveau Bulletin`

**Modifications √† faire:**

1. Supprime compl√®tement la zone FileChooser (la Box avec le bouton de s√©lection de fichier)
2. Supprime l'Expander avec le TextView OCR
3. Renomme les IDs des widgets pour √©viter les conflits:
   - `notebook_scan` ‚Üí `notebook_create`
   - Tous les `entry_xxx` ‚Üí ajoute un suffixe `_create`
   - `treeview_matieres_scan` ‚Üí `treeview_matieres_create`
   - `liststore_matieres_scan` ‚Üí `liststore_matieres_create`
   - `label_moyenne_scan` ‚Üí `label_moyenne_create`

### 3.2 Option 2 - Cr√©er from scratch

Si tu pr√©f√®res cr√©er de z√©ro (m√™me structure que scan mais plus simple):

**Cr√©er le dialogue:**
- **GtkDialog**
- **ID**: `dialog_create`
- **Title**: `Cr√©er un Nouveau Bulletin`
- M√™me taille que dialog_scan

**Contenu:**
- M√™me Notebook avec 2 onglets
- Onglet 1: M√™me Grid avec les infos personnelles
- Onglet 2: M√™me zone de mati√®res

**Important:** Tous les champs sont VIDES au d√©part, contrairement au scan o√π ils sont pr√©-remplis par l'OCR.

---

## üëÅÔ∏è PHASE 4: DIALOGUE DE VISUALISATION/MODIFICATION {#phase-4}

Ce dialogue s'ouvre quand on double-clique sur un √©l√®ve dans le tableau principal.

### 4.1 Cr√©er le dialogue

1. Ajoute un nouveau **GtkDialog**
2. Propri√©t√©s:
   - **ID**: `dialog_view`
   - **Title**: `Bulletin Scolaire` (sera chang√© dynamiquement)
   - **Width**: `1000`
   - **Height**: `800`
   - **Modal**: `Oui`

**Boutons du dialogue:**

Cette fois, on ne veut PAS les boutons standards. On va cr√©er nos propres boutons.

1. Dans l'Action Area, supprime les boutons par d√©faut
2. On cr√©era une barre d'outils personnalis√©e dans le content area

### 4.2 Structure du contenu

**Dans la Content Area:**

1. Ajoute un **GtkBox** vertical
2. **ID**: `view_main_box`
3. Nombre d'√©l√©ments: `3` (barre actions, contenu, bouton fermer)

---

**ZONE 1 - Barre d'actions (en haut):**

1. Ajoute un **GtkBox** horizontal
2. Propri√©t√©s:
   - **ID**: `view_toolbar`
   - **Espacement**: `10`
   - **Margins**: toutes √† `10`
   - Dans Packing: **Expand**: `Non`

3. Ajoute 4 boutons dans cette barre:

**Bouton 1 - Modifier:**
- **GtkButton**
- **ID**: `btn_edit_bulletin`
- **Label**: `Modifier`
- Ic√¥ne: `gtk-edit`
- Signal: `clicked` ‚Üí `on_btn_edit_clicked`

**Bouton 2 - Enregistrer:**
- **GtkButton**
- **ID**: `btn_save_bulletin`
- **Label**: `Enregistrer`
- Ic√¥ne: `gtk-save`
- **Sensitive**: `Non` (d√©sactiv√© au d√©part)
- **Visible**: `Non` (cach√© au d√©part)
- Signal: `clicked` ‚Üí `on_btn_save_clicked`

**Bouton 3 - Supprimer:**
- **GtkButton**
- **ID**: `btn_delete_bulletin`
- **Label**: `Supprimer`
- Ic√¥ne: `gtk-delete`
- Signal: `clicked` ‚Üí `on_btn_delete_clicked`

**Bouton 4 - Exporter PDF:**
- **GtkButton**
- **ID**: `btn_export_pdf`
- **Label**: `Exporter en PDF`
- Ic√¥ne: `gtk-print` ou `gtk-save-as`
- Signal: `clicked` ‚Üí `on_btn_export_pdf_clicked`

---

**ZONE 2 - Contenu du bulletin (scrollable):**

1. Ajoute un **GtkScrolledWindow**
2. Propri√©t√©s:
   - **Policies**: Automatic
   - Dans Packing: **Expand**: `Oui`

3. Dans le ScrolledWindow, ajoute un **GtkBox** vertical
4. Propri√©t√©s:
   - **ID**: `view_content_box`
   - **Margins**: toutes √† `20`
   - **Espacement**: `20`

**Cette Box contiendra 4 sections:**

---

### 4.2.1 Section 1 - En-t√™te du bulletin

Dans `view_content_box`, ajoute:

1. **GtkBox** vertical
2. **Halign**: `Center`

Dans cette Box:

**Titre:**
- **GtkLabel**
- **ID**: `label_bulletin_header`
- **Label**: `<span size="xx-large" weight="bold">BULLETIN SCOLAIRE</span>`
- **Use markup**: `Oui`
- **Justify**: `Center`

**S√©parateur:**
- **GtkSeparator**
- **Orientation**: `Horizontal`
- **Margin top/bottom**: `10`

**Sous-titre:**
- **GtkLabel**
- **ID**: `label_etablissement`
- **Label**: `Votre √âtablissement - Ann√©e 2024-2025`
- **Use markup**: Oui
- Texte en italique

---

### 4.2.2 Section 2 - Informations de l'√©l√®ve

1. Ajoute un **GtkFrame**
2. Propri√©t√©s:
   - **Label**: `Informations Personnelles`
   - **Label xalign**: `0.0`
   - **Shadow type**: `In`

3. Dans le Frame, ajoute un **GtkGrid**
4. Propri√©t√©s:
   - **ID**: `grid_view_infos`
   - **Row spacing**: `10`
   - **Column spacing**: `15`
   - **Margins**: toutes √† `15`
   - **Row homogeneous**: `Oui`

**Configuration du Grid (4 colonnes):**

Le Grid affiche les infos en mode lecture seule (Labels), mais pourra passer en mode √©dition (Entries).

Pour chaque information, cr√©e une paire Label + Label (ou Label + Entry en mode √©dition).

**Structure recommand√©e (8 lignes x 4 colonnes):**

**Ligne 0:**
- (0,0) Label: `<b>Nom :</b>`
- (1,0) **GtkLabel** ID: `label_view_nom`
- (2,0) Label: `<b>Pr√©nom :</b>`
- (3,0) **GtkLabel** ID: `label_view_prenom`

**Ligne 1:**
- (0,1) Label: `<b>Matricule :</b>`
- (1,1) **GtkLabel** ID: `label_view_matricule`
- (2,1) Label: `<b>Date naissance :</b>`
- (3,1) **GtkLabel** ID: `label_view_date_naissance`

**Ligne 2:**
- (0,2) Label: `<b>Lieu naissance :</b>`
- (1,2) **GtkLabel** ID: `label_view_lieu`
- (2,2) Label: `<b>Classe :</b>`
- (3,2) **GtkLabel** ID: `label_view_classe`

**Ligne 3:**
- (0,3) Label: `<b>Ann√©e acad√©mique :</b>`
- (1,3) **GtkLabel** ID: `label_view_annee`
- (2,3) Label: `<b>Date bulletin :</b>`
- (3,3) **GtkLabel** ID: `label_view_date_bulletin`

**Astuce:** Pour tous les labels de valeurs (label_view_xxx):
- **Xalign**: `0.0` (align√©s √† gauche)
- **Selectable**: `Oui` (pour copier le texte)
- **Wrap**: `Oui` (retour √† la ligne si texte long)

---

### 4.2.3 Section 3 - Notes par semestre

1. Ajoute un **GtkFrame**
2. **Label**: `Mati√®res et Notes`

3. Dans le Frame, ajoute un **GtkNotebook**
4. Propri√©t√©s:
   - **ID**: `notebook_view_semestres`
   - **Show tabs**: `Oui`
   - **Show border**: `Non`
   - **Scrollable**: `Oui`

**Cr√©er 3 onglets:**

---

**ONGLET 1 - Semestre 1:**

1. Page du Notebook
2. **Tab label**: `Semestre 1`

3. Dans la page, **GtkBox** vertical

**Contenu:**

A) **GtkScrolledWindow** avec **GtkTreeView**:
- **ID**: `treeview_view_s1`
- **Model**: Cr√©e un nouveau ListStore
  - **ID**: `liststore_view_s1`
  - M√™me structure que liststore_matieres_scan
- Colonnes identiques aux mati√®res (mais non √©ditables)
- **Headers visible**: `Oui`
- **Enable grid lines**: `Horizontal and Vertical`

B) **GtkBox** horizontal pour stats S1:
- **Margins**: `15`
- **Espacement**: `20`
- **Halign**: `Center`

Dans cette Box, 3 GtkLabel:
- **ID**: `label_stats_s1_total`
  - **Label**: `Total: 0 mati√®res`
- **ID**: `label_stats_s1_validees`
  - **Label**: `Valid√©es: 0`
- **ID**: `label_stats_s1_moyenne`
  - **Label**: `Moyenne S1: 0.00`
  - Texte en gras et grande taille

---

**ONGLET 2 - Semestre 2:**

Structure identique √† l'onglet S1:
- **Tab label**: `Semestre 2`
- **GtkTreeView** ID: `treeview_view_s2`
- **ListStore** ID: `liststore_view_s2`
- Labels de stats S2

---

**ONGLET 3 - R√©capitulatif Annuel:**

1. **Tab label**: `R√©capitulatif Annuel`

2. Dans la page, **GtkBox** vertical
3. **Margins**: `30`, **Espacement**: `25`

**Contenu:**

A) **GtkGrid** pour statistiques globales:
- **Row spacing**: `15`
- **Column spacing**: `20`
- **Halign**: `Center`

Affiche des infos comme:
- Ligne 0: `Total mati√®res ann√©e` + valeur
- Ligne 1: `Mati√®res valid√©es` + valeur
- Ligne 2: `Taux de r√©ussite` + pourcentage
- Ligne 3: `Cr√©dits obtenus` + valeur

B) **GtkSeparator**

C) **GtkBox** vertical pour la moyenne g√©n√©rale:
- **Halign**: `Center`
- **Margins**: `20`

Contenu:
- **GtkLabel**: `Moyenne G√©n√©rale Annuelle`
- **GtkLabel** ID: `label_view_moyenne_generale`
  - **Label**: `0.00 / 20`
  - **Use markup**: Oui
  - Taille: `xx-large`
  - Poids: `bold`
  - La couleur sera d√©finie dans le code C

D) **GtkLabel** ID: `label_view_appreciation`
- **Label**: `Appr√©ciation: Tr√®s Bien`
- **Use markup**: Oui
- **Justify**: `Center`

---

### 4.2.4 Section 4 - Bouton de fermeture

**En bas du view_content_box:**

1. **GtkBox** horizontal
2. **Halign**: `Center`
3. **Margin top**: `20`

Dans cette Box:
- **GtkButton**
- **ID**: `btn_close_view`
- **Label**: `Fermer`
- Ic√¥ne: `gtk-close`
- **Width request**: `150`
- Signal: `clicked` ‚Üí `on_btn_close_view_clicked`

---

### 4.3 Sauvegarder

File ‚Üí Save

**V√©rification finale:** Tu devrais avoir 4 dialogues/fen√™tres:
1. `main_window` - Fen√™tre principale
2. `dialog_scan` - Scanner un bulletin
3. `dialog_create` - Cr√©er un bulletin
4. `dialog_view` - Visualiser un bulletin
5. `dialog_add_matiere` - Ajouter une mati√®re (petit dialogue)

---

## üîß PHASE 5: INT√âGRATION AVEC LE CODE C {#phase-5}

Maintenant que l'interface Glade est compl√®te, il faut la connecter au code C.

### 5.1 Modifier le Makefile

Ajoute les flags GTK+ √† ton Makefile existant:

```makefile
# Ajoute cette ligne au d√©but
GTK_FLAGS = `pkg-config --cflags --libs gtk+-3.0`

# Modifie la ligne LIBS
LIBS = -lsqlite3 -ltesseract -llept $(GTK_FLAGS)

# Ajoute gui.c aux sources
SOURCES = $(SRC_DIR)/main.c $(SRC_DIR)/bulletin_utils.c \
          $(SRC_DIR)/database.c $(SRC_DIR)/ocr_utils.c \
          $(SRC_DIR)/gui.c
```

### 5.2 Structure du fichier gui.c

Cr√©e `src/gui.c` avec cette structure g√©n√©rale:

**Sections √† inclure:**

1. **Includes et structure:**
   - Includes n√©cessaires
   - D√©finition de la structure AppWidgets (si pas dans .h)

2. **Fonction d'initialisation:**
   - `init_gui()` - Initialise GTK
   - `load_interface()` - Charge le fichier .glade
   - `connect_signals()` - Connecte tous les signaux manuellement
   - `setup_treeviews()` - Configure les TreeViews

3. **Callbacks fen√™tre principale:**
   - Toutes les fonctions `on_xxx` d√©clar√©es dans Glade
   - Gestion des clics menu
   - Recherche
   - S√©lection dans tableau

4. **Callbacks dialogue scan:**
   - S√©lection fichier
   - Lancement OCR
   - √âdition cellules
   - Ajout/suppression mati√®res

5. **Callbacks dialogue cr√©ation:**
   - Similaires au scan

6. **Callbacks dialogue visualisation:**
   - Basculer mode √©dition/lecture
   - Enregistrer modifications
   - Supprimer
   - Exporter PDF

7. **Fonctions utilitaires:**
   - `charger_liste_eleves()` - Remplit le TreeView principal
   - `calculer_moyenne_gui()` - Recalcule et affiche la moyenne
   - `afficher_message()` - Messages dans la statusbar
   - `afficher_erreur()` - Dialogue d'erreur
   - `confirmer_action()` - Dialogue de confirmation

### 5.3 Charger le fichier Glade

**Dans `load_interface()`:**

Utilise GtkBuilder pour charger le fichier .glade:

```c
// Pseudocode - structure g√©n√©rale
GtkBuilder *builder = gtk_builder_new();
// Charger le fichier
gtk_builder_add_from_file(builder, "ui/bulletin_app.glade", &error);

// R√©cup√©rer tous les widgets
app->main_window = GTK_WIDGET(gtk_builder_get_object(builder, "main_window"));
app->treeview_eleves = GTK_WIDGET(gtk_builder_get_object(builder, "treeview_eleves"));
// ... r√©cup√©rer TOUS les widgets d√©finis dans Glade
```

### 5.4 Connecter les signaux

**Dans `connect_signals()`:**

Tu as 2 options:

**Option 1 - Connexion automatique (recommand√©):**
```c
// Dans le fichier Glade, tu as d√©fini les noms des handlers
// GtkBuilder peut les connecter automatiquement
gtk_builder_connect_signals(builder, app);
```

**Option 2 - Connexion manuelle:**
```c
// Connecter signal par signal
g_signal_connect(app->btn_refresh, "clicked", 
                 G_CALLBACK(on_btn_refresh_clicked), app);
g_signal_connect(app->search_entry, "search-changed",
                 G_CALLBACK(on_search_changed), app);
// ... etc pour tous les signaux
```

### 5.5 Remplir le TreeView principal avec les donn√©es

**Fonction `charger_liste_eleves()`:**

Cette fonction r√©cup√®re tous les √©l√®ves de la base et les affiche dans le tableau.

**√âtapes:**
1. Vider le ListStore actuel
2. Requ√™te SQL pour r√©cup√©rer tous les √©l√®ves
3. Pour chaque √©l√®ve:
   - Cr√©er un GtkTreeIter
   - Ajouter une ligne au ListStore avec gtk_list_store_append()
   - Remplir les colonnes avec gtk_list_store_set()
4. Mettre √† jour la statusbar avec le nombre d'√©l√®ves

### 5.6 G√©rer le dialogue de scan

**Workflow complet:**

1. **Utilisateur clique "Scanner" dans le menu**
   - `on_menu_scanner_activate()` est appel√©
   - Affiche `dialog_scan` avec gtk_dialog_run()

2. **Utilisateur s√©lectionne un fichier**
   - `on_filechooser_file_set()` est appel√©
   - R√©cup√®re le chemin du fichier
   - Active le bouton "Lancer le scan"

3. **Utilisateur clique "Lancer le scan"**
   - `on_btn_lancer_scan_clicked()` est appel√©
   - Appelle `extraire_texte_image()` (ton code existant)
   - Affiche le texte brut dans `textview_ocr`
   - Appelle `analyser_bulletin_texte()` (ton code existant)
   - Remplit les Entry avec les infos extraites
   - Remplit le TreeView des mati√®res
   - Active le bouton "Enregistrer"

4. **Utilisateur corrige les erreurs**
   - Modifie les Entry directement
   - Double-clique sur les cellules du TreeView
   - Les callbacks `on_cell_edited()` sont appel√©s
   - Recalcule la moyenne automatiquement

5. **Utilisateur clique "Enregistrer"**
   - Le dialogue retourne GTK_RESPONSE_OK
   - R√©cup√®re toutes les donn√©es des widgets
   - Cr√©e une structure Eleve
   - Appelle `inserer_eleve()` (ton code existant)
   - Ferme le dialogue
   - Actualise le tableau principal

### 5.7 G√©rer l'√©dition des cellules

**Pour les CellRendererText √©ditables:**

```c
// Pseudocode du callback
void on_matiere_nom_edited(GtkCellRendererText *renderer,
                           gchar *path,
                           gchar *new_text,
                           AppWidgets *app) {
    GtkTreeIter iter;
    GtkTreeModel *model = GTK_TREE_MODEL(app->liststore_matieres_scan);
    
    // R√©cup√©rer l'it√©rateur de la ligne modifi√©e
    gtk_tree_model_get_iter_from_string(model, &iter, path);
    
    // Mettre √† jour la valeur dans le mod√®le
    gtk_list_store_set(app->liststore_matieres_scan, &iter,
                       0, new_text,  // Colonne 0 = nom mati√®re
                       -1);
    
    // Recalculer la moyenne si n√©cessaire
    calculer_moyenne_gui(app);
}
```

### 5.8 Calculer et afficher la moyenne

**Fonction `calculer_moyenne_gui()`:**

**√âtapes:**
1. Parcourir toutes les lignes du ListStore des mati√®res
2. Pour chaque ligne:
   - R√©cup√©rer la note (colonne 2)
   - R√©cup√©rer le coefficient (colonne 3)
   - R√©cup√©rer le type (colonne 6) - ignorer les MCP
3. Calculer: somme_notes_pond√©r√©es / somme_coefficients
4. Mettre √† jour le label_moyenne avec la nouvelle valeur
5. Changer la couleur selon la note:
   - Rouge si < 10
   - Orange si 10-12
   - Jaune si 12-14
   - Vert si >= 14

**Exemple de changement de couleur:**
```c
// Pseudocode
if (moyenne >= 14.0) {
    sprintf(markup, "<span size=\"x-large\" weight=\"bold\" foreground=\"green\">%.2f / 20</span>", moyenne);
} else if (moyenne >= 10.0) {
    sprintf(markup, "<span size=\"x-large\" weight=\"bold\" foreground=\"orange\">%.2f / 20</span>", moyenne);
} else {
    sprintf(markup, "<span size=\"x-large\" weight=\"bold\" foreground=\"red\">%.2f / 20</span>", moyenne);
}
gtk_label_set_markup(GTK_LABEL(app->label_moyenne_scan), markup);
```

### 5.9 G√©rer l'ajout de mati√®re

**Workflow:**

1. **Utilisateur clique "Ajouter une mati√®re"**
   - `on_btn_add_matiere_clicked()` appel√©
   - Vide tous les champs du `dialog_add_matiere`
   - Affiche le dialogue avec gtk_dialog_run()

2. **Utilisateur remplit le formulaire**
   - Entre le code, nom, note, coefficient, etc.

3. **Utilisateur clique "Ajouter"**
   - Dialogue retourne GTK_RESPONSE_OK
   - R√©cup√®re les valeurs de tous les widgets
   - Construit le nom complet de la mati√®re:
     - Format: `[S1-CP|MCP31L1101] CP31L1105 - Alg√®bre 1A`
   - Ajoute une nouvelle ligne au ListStore
   - Recalcule la moyenne
   - Ferme le dialogue

### 5.10 G√©rer la suppression de mati√®re

**Workflow:**

1. **Utilisateur s√©lectionne une ligne dans le TreeView**
   - `on_matiere_selection_changed()` appel√©
   - Active le bouton "Supprimer"

2. **Utilisateur clique "Supprimer"**
   - `on_btn_remove_matiere_clicked()` appel√©
   - R√©cup√®re la s√©lection actuelle
   - Affiche un dialogue de confirmation
   - Si confirm√©:
     - Supprime la ligne du ListStore
     - Recalcule la moyenne
     - D√©sactive le bouton "Supprimer"

### 5.11 G√©rer la visualisation/modification

**Workflow d'ouverture:**

1. **Utilisateur double-clique sur un √©l√®ve**
   - `on_treeview_row_activated()` appel√©
   - R√©cup√®re l'ID de l'√©l√®ve (colonne 0 invisible)
   - Appelle `recuperer_eleve(db, id)` (ton code existant)
   - Remplit tous les labels du `dialog_view` avec les donn√©es
   - Remplit les 2 TreeView (S1 et S2) avec les mati√®res
   - Calcule et affiche les statistiques
   - Affiche le dialogue

**Mode lecture (par d√©faut):**
- Tous les champs sont des GtkLabel (non modifiables)
- Bouton "Enregistrer" invisible
- Bouton "Modifier" visible

**Basculer en mode √©dition:**

1. **Utilisateur clique "Modifier"**
   - `on_btn_edit_clicked()` appel√©
   - Pour chaque GtkLabel d'info:
     - Cache le Label
     - Cr√©e un GtkEntry √† la place
     - Remplit l'Entry avec la valeur du Label
   - Rend les cellules des TreeView √©ditables
   - Cache le bouton "Modifier"
   - Affiche le bouton "Enregistrer"

2. **Utilisateur modifie les valeurs**
   - Tape directement dans les Entry
   - Modifie les cellules du TreeView

3. **Utilisateur clique "Enregistrer"**
   - `on_btn_save_clicked()` appel√©
   - R√©cup√®re toutes les valeurs des Entry
   - R√©cup√®re toutes les lignes des TreeView
   - Cr√©e une structure Eleve
   - Appelle `update_eleve(db, id, eleve)` (√† cr√©er dans database.c)
   - Repasse en mode lecture
   - Actualise le tableau principal

### 5.12 G√©rer la suppression d'un bulletin

**Workflow:**

1. **Utilisateur clique "Supprimer"**
   - `on_btn_delete_clicked()` appel√©
   - Affiche un GtkMessageDialog de confirmation:
     - Type: GTK_MESSAGE_WARNING
     - Buttons: GTK_BUTTONS_YES_NO
     - Message: "√ätes-vous s√ªr de vouloir supprimer ce bulletin ?"

2. **Si confirm√©:**
   - Appelle `delete_eleve(db, id)` (√† cr√©er dans database.c)
   - Ferme le dialogue de visualisation
   - Actualise le tableau principal
   - Affiche un message de succ√®s dans la statusbar

### 5.13 G√©rer la recherche

**Dans `on_search_changed()`:**

**√âtapes:**
1. R√©cup√©rer le texte de la GtkSearchEntry
2. Si le texte est vide:
   - R√©afficher tous les √©l√®ves
3. Sinon:
   - Filtrer le ListStore pour ne montrer que les √©l√®ves correspondants
   - La recherche se fait sur: nom, pr√©nom, matricule, classe

**M√©thode recommand√©e:**
- Utiliser un GtkTreeModelFilter
- D√©finir une fonction de filtrage custom
- Appliquer le filtre sur le ListStore

---

## üî® PHASE 6: COMPILATION ET TESTS {#phase-6}

### 6.1 Compiler le projet

**Dans le terminal:**

```bash
# Nettoyer
make clean

# Compiler
make

# Si erreurs de compilation:
# - V√©rifie que tous les #include sont corrects
# - V√©rifie que pkg-config trouve GTK+
pkg-config --cflags --libs gtk+-3.0

# V√©rifier les d√©pendances
ldd ./bulletin_scanner
```

### 6.2 Tester l'interface

**Test 1 - Lancement:**
```bash
./bulletin_scanner
```

V√©rifie que:
- La fen√™tre principale s'ouvre
- Le menu fonctionne
- Le tableau est vide (c'est normal si la BD est vide)

**Test 2 - Cr√©ation manuelle:**
1. Menu ‚Üí Nouveau bulletin
2. Remplis le formulaire
3. Ajoute 2-3 mati√®res
4. V√©rifie que la moyenne se calcule
5. Enregistre
6. V√©rifie que l'√©l√®ve appara√Æt dans le tableau

**Test 3 - Visualisation:**
1. Double-clique sur l'√©l√®ve dans le tableau
2. V√©rifie que toutes les infos s'affichent
3. Teste le bouton "Modifier"
4. Modifie une note
5. Enregistre
6. R√©ouvre pour v√©rifier la modification

**Test 4 - Recherche:**
1. Cr√©e plusieurs √©l√®ves
2. Tape un nom dans la barre de recherche
3. V√©rifie que le filtrage fonctionne

**Test 5 - Scanner (si OCR configur√©):**
1. Menu ‚Üí Scanner bulletin
2. S√©lectionne une image de test
3. Lance le scan
4. V√©rifie que le texte est extrait
5. Corrige les erreurs
6. Enregistre

**Test 6 - Suppression:**
1. S√©lectionne un √©l√®ve
2. Double-clique pour ouvrir
3. Clique "Supprimer"
4. Confirme
5. V√©rifie qu'il dispara√Æt du tableau

### 6.3 D√©boguer les erreurs courantes

**Erreur: Fichier .glade introuvable**
- Solution: V√©rifie le chemin dans `gtk_builder_add_from_file()`
- Mets le chemin absolu ou relatif correct

**Erreur: Widget NULL apr√®s gtk_builder_get_object()**
- Solution: L'ID dans Glade ne correspond pas √† celui dans le code
- V√©rifie les IDs dans Glade (ouvre le .glade avec un √©diteur de texte)

**Erreur: Callback non trouv√©**
- Solution: V√©rifie que le nom du callback dans Glade correspond au nom de la fonction dans gui.c
- V√©rifie que la fonction est bien d√©finie

**Erreur de segmentation:**
- Utilise gdb pour d√©boguer:
```bash
gdb ./bulletin_scanner
run
# Quand √ßa crash:
backtrace
```

**TreeView ne se remplit pas:**
- V√©rifie que le ListStore est bien associ√© au TreeView
- V√©rifie que les colonnes sont bien configur√©es
- V√©rifie les indices des colonnes

**La moyenne ne se calcule pas:**
- Ajoute des printf() pour d√©boguer
- V√©rifie que les callbacks sont bien appel√©s
- V√©rifie les types de donn√©es (gint, gdouble, etc.)

### 6.4 Optimisations possibles

**Performance:**
- Ne recharge pas tout le ListStore √† chaque modification
- Utilise gtk_list_store_set() pour modifier une ligne existante
- Mets en cache les requ√™tes SQL fr√©quentes

**UX (Exp√©rience utilisateur):**
- Ajoute des barres de progression pour les op√©rations longues (OCR)
- Ajoute des messages de confirmation pour toutes les actions importantes
- Ajoute des tooltips sur les boutons (propri√©t√© "tooltip-text" dans Glade)
- Ajoute des acc√©l√©rateurs clavier pour les actions fr√©quentes

**Validation:**
- V√©rifie que les notes sont entre 0 et 20
- V√©rifie que les coefficients sont > 0
- V√©rifie que les champs obligatoires sont remplis
- Affiche des messages d'erreur clairs

### 6.5 Cr√©er un script de lancement

Cr√©e `run.sh`:

```bash
#!/bin/bash

# Script de lancement de l'application

# V√©rifier que la base de donn√©es existe
if [ ! -f "data/bulletins.db" ]; then
    echo "Cr√©ation de la base de donn√©es..."
    mkdir -p data
fi

# V√©rifier que le fichier Glade existe
if [ ! -f "ui/bulletin_app.glade" ]; then
    echo "ERREUR: Fichier ui/bulletin_app.glade introuvable!"
    exit 1
fi

# Lancer l'application
./bulletin_scanner

# Ou avec redirection des erreurs:
# ./bulletin_scanner 2> errors.log
```

Rends-le ex√©cutable:
```bash
chmod +x run.sh
./run.sh
```

---

## ‚úÖ CHECKLIST FINALE {#checklist}

### Interface Glade

- [ ] Fen√™tre principale cr√©√©e avec tous les widgets
- [ ] Menu bar avec tous les menus et items
- [ ] Barre de recherche fonctionnelle
- [ ] TreeView principal avec ListStore et colonnes
- [ ] Statusbar en bas
- [ ] Dialogue de scan complet (FileChooser, OCR, formulaire)
- [ ] Dialogue de cr√©ation manuelle
- [ ] Dialogue de visualisation/modification
- [ ] Dialogue d'ajout de mati√®re
- [ ] Tous les widgets ont des IDs uniques et coh√©rents
- [ ] Tous les signaux sont d√©finis dans Glade
- [ ] Fichier .glade sauvegard√© dans ui/

### Code C - Structure

- [ ] Fichier gui.h cr√©√© avec structure AppWidgets
- [ ] Fichier gui.c cr√©√© avec toutes les fonctions
- [ ] Prototypes de tous les callbacks dans gui.h
- [ ] Includes GTK+ et autres headers n√©cessaires
- [ ] Structure AppWidgets contient tous les pointeurs
- [ ] Makefile modifi√© avec flags GTK+

### Code C - Initialisation

- [ ] Fonction init_gui() qui initialise GTK
- [ ] Fonction load_interface() qui charge le .glade
- [ ] GtkBuilder r√©cup√®re tous les widgets
- [ ] Fonction connect_signals() connecte tous les callbacks
- [ ] Fonction setup_treeviews() configure les TreeViews
- [ ] Fonction run_gui() lance la boucle principale GTK

### Code C - Callbacks fen√™tre principale

- [ ] on_menu_scanner_activate() ouvre dialogue scan
- [ ] on_menu_nouveau_activate() ouvre dialogue cr√©ation
- [ ] on_menu_recherche_activate() ouvre dialogue recherche
- [ ] on_menu_quit_activate() ferme l'application
- [ ] on_menu_about_activate() affiche dialogue √Ä propos
- [ ] on_search_changed() filtre les r√©sultats
- [ ] on_btn_refresh_clicked() recharge la liste
- [ ] on_treeview_row_activated() ouvre bulletin

### Code C - Callbacks dialogue scan

- [ ] on_filechooser_file_set() g√®re s√©lection fichier
- [ ] on_btn_lancer_scan_clicked() lance l'OCR
- [ ] on_btn_add_matiere_clicked() ouvre dialogue ajout
- [ ] on_btn_remove_matiere_clicked() supprime mati√®re
- [ ] on_btn_recalc_clicked() recalcule moyenne
- [ ] on_cell_edited() pour toutes les cellules √©ditables
- [ ] on_matiere_validee_toggled() g√®re case √† cocher

### Code C - Callbacks dialogue visualisation

- [ ] on_btn_edit_clicked() bascule en mode √©dition
- [ ] on_btn_save_clicked() enregistre modifications
- [ ] on_btn_delete_clicked() supprime bulletin
- [ ] on_btn_export_pdf_clicked() exporte en PDF
- [ ] on_btn_close_view_clicked() ferme dialogue

### Code C - Fonctions utilitaires

- [ ] charger_liste_eleves() remplit TreeView principal
- [ ] calculer_moyenne_gui() calcule et affiche moyenne
- [ ] afficher_message() dans statusbar
- [ ] afficher_erreur() dialogue d'erreur GTK
- [ ] confirmer_action() dialogue de confirmation
- [ ] clear_liststore() vide un ListStore
- [ ] valider_formulaire() v√©rifie les champs

### Int√©gration avec code existant

- [ ] Les fonctions database.c sont appel√©es correctement
- [ ] Les fonctions ocr_utils.c sont appel√©es correctement
- [ ] Les structures Eleve et Matiere sont compatibles
- [ ] La base de donn√©es SQLite fonctionne avec GUI
- [ ] Pas de conflit entre GUI et code ligne de commande

### Tests fonctionnels

- [ ] L'application se lance sans erreur
- [ ] La fen√™tre principale s'affiche correctement
- [ ] Le menu fonctionne (tous les items)
- [ ] La cr√©ation manuelle fonctionne
- [ ] L'ajout de mati√®res fonctionne
- [ ] Le calcul de moyenne est correct
- [ ] L'enregistrement en base fonctionne
- [ ] Le tableau principal se remplit
- [ ] La recherche filtre correctement
- [ ] La visualisation affiche toutes les infos
- [ ] La modification fonctionne
- [ ] La suppression fonctionne
- [ ] Le scan OCR fonctionne (si configur√©)
- [ ] L'export PDF fonctionne (si impl√©ment√©)

### Finitions

- [ ] Messages d'erreur clairs et en fran√ßais
- [ ] Messages de confirmation avant actions importantes
- [ ] Tooltips sur les boutons principaux
- [ ] Interface responsive (redimensionnable)
- [ ] Pas de memory leaks (test√© avec valgrind)
- [ ] Code comment√© et bien structur√©
- [ ] README avec instructions d'installation et utilisation
- [ ] Script de lancement cr√©√©

---

## üìö RESSOURCES COMPL√âMENTAIRES

### Documentation officielle

- **GTK+ 3 Reference Manual**: https://docs.gtk.org/gtk3/
- **Glade Manual**: https://glade.gnome.org/
- **GObject Tutorial**: https://docs.gtk.org/gobject/

### Tutoriels recommand√©s

1. **GTK+ Tutorial for Beginners**: https://zetcode.com/gui/gtk2/
2. **Glade GUI Tutorial**: https://prognotes.net/glade-gui-programming-tutorial/
3. **TreeView Tutorial**: https://developer.gnome.org/gtk3/stable/TreeWidget.html

### Exemples de code

- **GNOME GitLab**: https://gitlab.gnome.org/GNOME/gtk
- **GitHub GTK Examples**: Cherche "gtk3 examples C"

### Outils utiles

- **Glade**: √âditeur d'interface graphique
- **GTK Inspector**: D√©bogueur d'interface (lance avec GTK_DEBUG=interactive)
- **Devhelp**: Documentation GTK+ hors ligne
- **GDB**: D√©bogueur C
- **Valgrind**: D√©tection de fuites m√©moire

### Commandes utiles

```bash
# Lancer avec l'inspecteur GTK
GTK_DEBUG=interactive ./bulletin_scanner

# V√©rifier les memory leaks
valgrind --leak-check=full ./bulletin_scanner

# Voir les signaux GTK disponibles
GTK_DEBUG=signals ./bulletin_scanner

# Lister les widgets disponibles
pkg-config --list-all | grep gtk
```

---

## üéØ PROCHAINES √âTAPES SUGG√âR√âES

### Am√©liorations futures

1. **Export PDF am√©lior√©**
   - Utiliser Cairo pour g√©n√©rer des PDF propres
   - Template de bulletin professionnel
   - Logo de l'√©tablissement

2. **Statistiques avanc√©es**
   - Graphiques avec Cairo ou autre biblioth√®que
   - Histogrammes de notes
   - √âvolution des moyennes
   - Comparaisons entre √©l√®ves

3. **Gestion multi-utilisateurs**
   - Syst√®me de connexion
   - Diff√©rents niveaux d'acc√®s (admin, prof, √©tudiant)
   - Base de donn√©es avec tables users

4. **Import/Export**
   - Import CSV de listes d'√©l√®ves
   - Export Excel des bulletins
   - Sauvegarde/restauration de la base

5. **Notifications**
   - Syst√®me de rappels
   - Alertes pour bulletins incomplets
   - Notifications de modification

6. **Mode sombre**
   - Th√®me clair/sombre
   - Pr√©f√©rences utilisateur
   - Sauvegarde des param√®tres

7. **Internationalisation**
   - Support multilingue (fran√ßais, anglais, etc.)
   - Utiliser gettext
   - Traduction de l'interface

8. **Documentation**
   - Manuel utilisateur PDF
   - Guide d'installation d√©taill√©
   - Vid√©o tutoriel
   - FAQ

---

## üí° CONSEILS FINAUX

### Bonnes pratiques

1. **Sauvegarde r√©guli√®re**
   - Utilise Git pour versioner ton code
   - Commit apr√®s chaque fonctionnalit√© qui marche
   - Cr√©e des branches pour les nouvelles fonctionnalit√©s

2. **D√©bogage efficace**
   - Utilise des printf() pour tracer l'ex√©cution
   - Utilise GDB pour les crashes
   - Teste chaque fonctionnalit√© isol√©ment

3. **Organisation du code**
   - Un fichier par dialogue/fen√™tre si le projet grandit
   - S√©pare la logique m√©tier de l'interface
   - Commente les parties complexes

4. **Tests**
   - Teste avec des donn√©es r√©elles
   - Teste les cas limites (notes √† 0, √† 20, etc.)
   - Teste avec beaucoup d'√©l√®ves (performance)

5. **Performance**
   - Ne recharge que ce qui a chang√©
   - Utilise des requ√™tes SQL optimis√©es
   - Mets en cache les donn√©es fr√©quemment acc√©d√©es

### Ordre de d√©veloppement recommand√©

1. D'abord, fais fonctionner la fen√™tre principale
2. Ensuite, le dialogue de cr√©ation manuelle (plus simple)
3. Puis, le dialogue de visualisation
4. Ensuite, le dialogue de scan (plus complexe)
5. Enfin, les fonctionnalit√©s avanc√©es (export PDF, etc.)

### En cas de blocage

1. Relis le guide √©tape par √©tape
2. V√©rifie les IDs des widgets dans Glade
3. V√©rifie que les signaux sont bien connect√©s
4. Consulte la documentation GTK+
5. Cherche des exemples similaires sur GitHub
6. Pose des questions sur les forums (Stack Overflow, Reddit r/gtk)

---

## üéâ CONCLUSION

Tu as maintenant un guide complet pour cr√©er l'interface GTK+ de ton scanner de bulletins !

**R√©capitulatif du projet:**
- ‚úÖ Interface graphique moderne avec Glade
- ‚úÖ 4 fen√™tres/dialogues principales
- ‚úÖ Int√©gration avec ton code C existant
- ‚úÖ Scanner OCR avec pr√©visualisation et correction
- ‚úÖ Cr√©ation/modification/suppression de bulletins
- ‚úÖ Recherche et filtrage
- ‚úÖ Statistiques et calculs automatiques

**Temps estim√© de r√©alisation:**
- Interface Glade: 4-6 heures
- Code C d'int√©gration: 8-12 heures
- Tests et d√©bogages: 4-6 heures
- **Total: 16-24 heures** (pour un d√©veloppeur d√©butant en GTK+)

**R√©sultat final:**
Une application de bureau compl√®te et professionnelle pour la d√©mat√©rialisation des bulletins scolaires, avec interface intuitive et toutes les fonctionnalit√©s n√©cessaires !

Bon courage pour le d√©veloppement ! üöÄ

---

**Version du guide:** 1.0  
**Date:** Janvier 2025  
**Compatibilit√©:** GTK+ 3.x, Glade 3.x, GCC, Linuxt